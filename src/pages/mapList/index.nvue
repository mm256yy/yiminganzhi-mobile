<template>
	<view class="map-wrap" :style="{ paddingTop: `${statusBarHeight}px` }">
		<image class="bg" src="@/static/images/common_bg.png" mode="widthFix" />
		<view class="common-header">
		  <view class="back-box" @click="onBack">
		    <uni-icons type="back" color="#ffffff" size="14rpx" />
		  </view>
		  <text class="tit">地图查看</text>
		  <text class="right-btn"/>
		</view>
		<view class="map-content">
			<map
				id="map"
				class="map"
				:enable-satellite="true"
				:enable-overlooking="true"
				:latitude="centerLocation.latitude"
				:longitude="centerLocation.longitude"
				:polygons="polygons"
				:markers="markers"
				:scale="14"
				@markertap="markerTap"
			></map>
		</view>
		<map-info v-if="show" :data-info="dataInfo" @close="close" />
	</view>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue'
import { onReady } from '@dcloudio/uni-app'
import MapInfo from './components/MapInfo'
import { routerBack, hideStr } from '@/utils'
import { getVillageListWithPageApi, getLandlordListBySearchApi } from '@/service'
import shuangxi from './shuangxi'
import iconPath from './iconPath'
import { MainType, LandlordSearchType } from '@/types/common'

const sysInfo = uni.getSystemInfoSync()
const statusBarHeight = sysInfo.statusBarHeight || 0
const dataInfo = ref<any>({}) // marker 详细信息（居民户/自然村详情信息）
const show = ref<boolean>(false)
const page = ref<number>(1)
const pageSize = ref<number>(99999)
const keyWords = ref<string>('')
const villageList = ref<any>([]) // 自然村列表
const villageMarkersList = ref<any>([]) // 自然村标记列表
const householdList = ref<any>([]) // 居民户列表
const householdMarkersList = ref<any>([]) // 居民户标记列表

interface LocationType {
  longitude: number
  latitude: number
}

// 初始地图坐标
const centerLocation = ref<LocationType>({
	latitude: 29.43737204801587, // 纬度
	longitude: 119.766446455085699 // 经度
})

const polygons = ref<any>([])

const markers = ref<any[]>([])

// 获取自然村列表
const getVillageList = async () => {
  const res = await getVillageListWithPageApi({
    name: keyWords.value,
    page: page.value,
    pageSize: pageSize.value
  })
	
	if (res && res.length) {
		let villageArr: any = []
		let markerArr: any = []
		res.map((item: any) => {
			if (item.latitude && item.longitude && item.areaCodeText) {
				villageArr.push({
					id: item.id,
					uid: item.uid,
					name: item.name,
					areaCode: item.areaCode,
					townCode: item.townCode,
					villageCode: item.villageCode,
					areaCodeText: item.areaCodeText,
					townCodeText: item.townCodeText,
					villageCodeText: item.villageCodeText,
					type: MainType.Village
				})
				markerArr.push({
					id: item.uid,
					iconPath: iconPath.villageIconPath,
					label: {
						// x: 24,
						// y: -36,
						// padding: 10,
						// borderRadius: 30,
						x: -(0.5 * ((item.name.length > 8 ? 8 : item.name.length) * 12) / 2 ) - 12,
						y: 5,
						padding: 4,
						content: hideStr(item.name, 8),
						color: '#FFFFFF',
						fontSize: 12,
						bgColor: '#17171890',
						borderRadius: 4
					},
					width: 40,
					height: 40,
					latitude: item.latitude,
					longitude: item.longitude,
					joinCluster: true
				})
			}
		})
		villageList.value = villageArr
		villageMarkersList.value = markerArr
	}
}

// 获取居民户列表
const getPeasantHouseholdList = async () => {
	const params: LandlordSearchType = {
	  name: keyWords.value,
	  page: page.value,
	  pageSize: pageSize.value,
	  type: MainType.PeasantHousehold
	}
	const res = await getLandlordListBySearchApi(params)
	if (res && res.length) {
		let householdArr: any = []
		let markerArr: any = []
		res.map((item: any) => {
			if (item.latitude && item.longitude) {
				householdArr.push({
					id: item.id,
					uid: item.uid,
					name: item.name,
					card: item.card,
					address: item.address,
					doorNo: item.doorNo,
					houseNum: item.immigrantHouseList.length,
					demographicNum: item.demographicList.length,
					areaCode: item.areaCode,
					townCode: item.townCode,
					villageCode: item.villageCode,
					virutalVillageCode: item.virutalVillageCode,
					areaCodeText: item.areaCodeText,
					townCodeText: item.townCodeText,
					villageCodeText: item.villageCodeText,
					virutalVillageCodeText: item.virutalVillageCodeText,
					type: MainType.PeasantHousehold
				})
				markerArr.push({
					id: item.uid,
					iconPath: iconPath.userIconPath,
					label: {
						// x: 24,
						// y: -36,
						// padding: 10,
						// borderRadius: 30,
						x: -(0.5 * ((item.name.length > 8 ? 8 : item.name.length) * 12) / 2 ) - 12,
						y: 5,
						padding: 4,
						content: hideStr(item.name, 8),
						color: '#FFFFFF',
						fontSize: 12,
						bgColor: '#17171890',
						borderRadius: 4
					},
					width: 40,
					height: 40,
					latitude: item.latitude,
					longitude: item.longitude,
					joinCluster: true
				})
			}
		})
		householdList.value = householdArr
		householdMarkersList.value = markerArr
	}
}

// 初始化标记点
const initMarker = async () => {
	await getVillageList()
	await getPeasantHouseholdList()
	markers.value = [...villageMarkersList.value, ...householdMarkersList.value]
}

/**
 * 初始化处理区域坐标数据
 * @param{Object} obj 坐标数据
 */ 
const initCoordinateData = (obj: any) => {
	let polygonsArr: any = []
	if (obj && JSON.stringify(obj) !== '{}') {
		const features = obj.features ? obj.features : []
		features && features.map((item: any) => {
			item.geometry.coordinates[0].map((coord: any) => {
				polygonsArr.push({
					points: genArr(coord),
					strokeWidth: 2,
					strokeColor: '#FF0000',
					fillColor: 'transparent'
				})
			})
		})
		polygons.value = polygonsArr
	}
}

/**
 * 生成一个新的数组
 * @param{Array} arr 原数组
 */
const genArr = (arr: any) => {
	let newArr: any = []
	if (arr && arr.length > 0) {
		arr.map((item: any) => {
			newArr.push({
				longitude: item[0],
				latitude: item[1]
			})
		})
		return newArr
	} else {
		return newArr
	}
}

/**
 * 点击标记点
 * @param{Object} e
 */
const markerTap = (e: any) => {
	getDataInfo(e.detail.markerId)
	show.value = true
}

// 获取单个居民户/自然村 信息
const getDataInfo = (uid: string) => {
	if (uid) {
		let arr: any = [...villageList.value, ...householdList.value]
		arr.map((item: any) => {
			if (item.uid === uid) {
				if (item.type === MainType.Village) {
					dataInfo.value = {
						uid: item.uid,
						name: item.name,
						areaCodeText: item.areaCodeText,
						townCodeText: item.townCodeText,
						villageCodeText: item.villageCodeText,
						type: item.type
					}
					return
				} else if (item.type === MainType.PeasantHousehold) {
					dataInfo.value = {
						uid: item.uid,
						name: item.name,
						card: item.card,
						doorNo: item.doorNo,
						address: item.address,
						houseNum: item.houseNum,
						demographicNum: item.demographicNum,
						areaCode: item.areaCode,
						townCode: item.townCode,
						villageCode: item.villageCode,
						virutalVillageCode: item.virutalVillageCode,
						type: item.type
					}
					return
				}
			}
		})
	}
}

// 关闭居民户简介/自然村简介弹窗
const close = () => {
	show.value = false
}

const onBack = () => {
  routerBack()
}

onReady(() => {
	const _mapContext = uni.createMapContext("map")

	// 点聚合：仅调用初始化，才会触发 on.("markerClusterCreate", (e) => {})
	_mapContext.initMarkerCluster({
		enableDefaultStyle: false,
		zoomOnClick: true,
		gridSize: 60,
		complete (res: any) {
			console.log('initMarkerCluster', res)
		}
	})

	_mapContext.on("markerClusterCreate", (e: any) => {
		console.log("markerClusterCreate", e)
	})

	initMarker()
})

onMounted(() => {
	initCoordinateData(shuangxi)
})
</script>

<style lang="scss" scoped>
.map-wrap {
  position: relative;
  display: flex;
  flex-direction: column;
  flex: 1;
  width: 750rpx;

  .bg {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    width: 750rpx;
    height: 100%;
  }

  .common-header {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    height: 33rpx;
    padding: 0 10rpx 0 6rpx;

    .back-box {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 26rpx;
      height: 26rpx;
    }

    .tit {
      font-size: 15rpx;
      font-weight: 600;
      color: #ffffff;
    }
    .right-btn {
      font-size: 12rpx;
      color: #ffffff;
    }
  }

  .map-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    width: 750rpx;
  }
  // 默认撑满
  .map {
    flex: 1;
    width: 750rpx;

    /* #ifdef H5 */
    ::v-deep.amap-logo {
      display: none !important;
    }

    ::v-deep.amap-copyright {
      display: none !important;
    }
    /* #endif */
  }
}
</style>
