<template>
  <view class="map-wrap" :style="{ paddingTop: `${statusBarHeight}px` }">
    <image class="bg" src="@/static/images/common_bg.png" mode="widthFix" />
    <view class="common-header">
      <view class="back-box" @click="onBack">
        <uni-icons type="back" color="#ffffff" size="14rpx" />
      </view>
      <text class="tit">地图查看</text>
      <text class="right-btn" />
    </view>
    <view class="map-content">
      <map
        id="map"
        class="map"
        :enable-satellite="true"
        :enable-overlooking="true"
        :latitude="centerLocation.latitude"
        :longitude="centerLocation.longitude"
        :polygons="polygons"
        :markers="markers"
        :scale="14"
        @markertap="markerTap"
      ></map>
    </view>
    <map-info v-if="show" :data-info="dataInfo" @close="close" />
  </view>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue'
import { onReady } from '@dcloudio/uni-app'
import MapInfo from './components/MapInfo.vue'
import { routerBack, hideStr, getStorage, StorageKey } from '../../utils'
import {
  getVillageListApi,
  getLandlordListWithMapApi,
  getLandlordItemApi,
  getVillageItemApi
} from '../../service'
import iconPath from './iconPath'
import { MainType } from '../../types/common'

interface LocationType {
  longitude: number
  latitude: number
}

const sysInfo = uni.getSystemInfoSync()
const statusBarHeight = sysInfo.statusBarHeight || 0
const dataInfo = ref<any>({}) // marker 详细信息（居民户/自然村详情信息）
const projectInfo = getStorage(StorageKey.PROJECTINFO)
const show = ref<boolean>(false)
const villageMarkersList = ref<any>([]) // 自然村标记点列表
const householdMarkersList = ref<any>([]) // 居民户标记点列表

const mapJson = projectInfo?.mapJson ? JSON.parse(projectInfo.mapJson) : {}
const polygons = ref<any>([])
const markers = ref<any[]>([]) // 标记点集合
// 初始地图坐标
const centerLocation = ref<LocationType>({
  longitude: 120.153576,
  latitude: 30.287459
})

// 计算区域中心经纬度，若没有中心经纬度，默认为杭州经、纬度
const initCenterPoints = (obj: any) => {
  let arr: any = []
  if (obj && JSON.stringify(obj) !== '{}') {
    obj?.features.map((item: any) => {
      arr.push(...item.geometry?.coordinates[0][0])
    })
    if (arr.length === 1) {
      return { longitude: arr[0], latitude: arr[1] }
    } else if (arr.length > 1) {
      let len = arr.length
      let longitude = arr[len / 2][0]
      let latitude = arr[len / 2][1]
      return { longitude, latitude }
    } else {
      return { longitude: 120.153576, latitude: 30.287459 }
    }
  } else {
    return { longitude: 120.153576, latitude: 30.287459 }
  }
}

/**
 * 生成一个新的数组
 * @param{Array} arr 原数组
 */
const genArr = (arr: any) => {
  let newArr: any = []
  if (arr && arr.length > 0) {
    arr.map((item: any) => {
      newArr.push({
        longitude: item[0],
        latitude: item[1]
      })
    })
    return newArr
  } else {
    return newArr
  }
}

/**
 * 初始化处理区域坐标数据，用于区域描边
 * @param{Object} obj 坐标数据
 */
const initCoordinateData = (obj: any) => {
  let arr: any = []
  if (obj && JSON.stringify(obj) !== '{}') {
    const features = obj.features ? obj.features : []
    features &&
      features.map((item: any) => {
        item.geometry.coordinates[0].map((coord: any) => {
          arr.push({
            points: genArr(coord),
            strokeWidth: 2,
            strokeColor: '#FF0000',
            fillColor: 'transparent'
          })
        })
      })
  }
  return arr
}

onMounted(() => {
  polygons.value = initCoordinateData(mapJson) // 区域经纬度集合
  centerLocation.value = initCenterPoints(mapJson) // 区域中心经纬度
})

// 获取自然村列表
const getVillageList = async () => {
  const res = await getVillageListApi()
  if (res && res.length) {
    let markerArr: any = []
    res.map((item: any) => {
      if (item.latitude && item.longitude && item.areaCodeText) {
        markerArr.push({
          id: `${item.uid}@@${MainType.Village}`,
          iconPath: iconPath.villageIconPath,
          label: {
            // x: 24,
            // y: -36,
            // padding: 10,
            // borderRadius: 30,
            x: -((0.5 * ((item.name.length > 8 ? 8 : item.name.length) * 12)) / 2) - 12,
            y: 5,
            padding: 4,
            content: hideStr(item.name, 8),
            color: '#FFFFFF',
            fontSize: 12,
            bgColor: '#17171890',
            borderRadius: 4
          },
          width: 40,
          height: 40,
          latitude: item.latitude,
          longitude: item.longitude,
          joinCluster: true
        })
      }
    })
    villageMarkersList.value = markerArr
  }
}

// 获取居民户列表
const getPeasantHouseholdList = async () => {
  const res = await getLandlordListWithMapApi(MainType.PeasantHousehold)
  if (res && res.length) {
    let markerArr: any = []
    res.map((item: any) => {
      if (item.latitude && item.longitude) {
        markerArr.push({
          id: `${item.uid}@@${MainType.PeasantHousehold}`,
          iconPath: iconPath.userIconPath,
          label: {
            // x: 24,
            // y: -36,
            // padding: 10,
            // borderRadius: 30,
            x: -((0.5 * ((item.name.length > 8 ? 8 : item.name.length) * 12)) / 2) - 12,
            y: 5,
            padding: 4,
            content: hideStr(item.name, 8),
            color: '#FFFFFF',
            fontSize: 12,
            bgColor: '#17171890',
            borderRadius: 4
          },
          width: 40,
          height: 40,
          latitude: item.latitude,
          longitude: item.longitude,
          joinCluster: true
        })
      }
    })
    householdMarkersList.value = markerArr
  }
}

// 初始化标记点
const initMarker = async () => {
  await getVillageList()
  await getPeasantHouseholdList()
  markers.value = [...villageMarkersList.value, ...householdMarkersList.value]
}

/**
 * 点击标记点
 * @param{Object} e
 */
const markerTap = (e: any) => {
  getDataInfo(e.detail.markerId)
}

// 获取单个居民户/自然村 信息
const getDataInfo = async (str: string) => {
  if (str) {
    const strArr = str.split('@@')
    const uid = strArr[0]
    const type = strArr[1]
    if (type === MainType.PeasantHousehold) {
      // 获取居民户详情
      const data = await getLandlordItemApi(uid)
      if (data) {
        dataInfo.value = {
          uid: data.uid,
          name: data.name,
          card: data.card,
          doorNo: data.doorNo,
          address: data.address,
          houseNum: data.immigrantHouseList.length,
          demographicNum: data.demographicList.length,
          areaCode: data.areaCode,
          townCode: data.townCode,
          villageCode: data.villageCode,
          virutalVillageCode: data.virutalVillageCode,
          type: MainType.PeasantHousehold
        }
        show.value = true
      }
    } else {
      // 获取自然村详情
      const data = await getVillageItemApi(uid)
      if (data) {
        dataInfo.value = {
          ...data,
          type: MainType.Village
        }
        show.value = true
      }
    }
  }
}

// 关闭居民户简介/自然村简介弹窗
const close = () => {
  show.value = false
}

const onBack = () => {
  routerBack()
}

onReady(() => {
  const _mapContext = uni.createMapContext('map')

  // 点聚合：仅调用初始化，才会触发 on.("markerClusterCreate", (e) => {})
  _mapContext.initMarkerCluster({
    enableDefaultStyle: false,
    zoomOnClick: true,
    gridSize: 60,
    complete(res: any) {
      console.log('initMarkerCluster', res)
    }
  })

  _mapContext.on('markerClusterCreate', (e: any) => {
    console.log('markerClusterCreate', e)
  })

  initMarker()
})
</script>

<style lang="scss" scoped>
.map-wrap {
  position: relative;
  display: flex;
  flex-direction: column;
  flex: 1;
  width: 750rpx;

  .bg {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    width: 750rpx;
    height: 100%;
  }

  .common-header {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    height: 33rpx;
    padding: 0 10rpx 0 6rpx;

    .back-box {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 26rpx;
      height: 26rpx;
    }

    .tit {
      font-size: 15rpx;
      font-weight: 600;
      color: #ffffff;
    }
    .right-btn {
      font-size: 12rpx;
      color: #ffffff;
    }
  }

  .map-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    width: 750rpx;
  }
  // 默认撑满
  .map {
    flex: 1;
    width: 750rpx;

    /* #ifdef H5 */
    ::v-deep.amap-logo {
      display: none !important;
    }

    ::v-deep.amap-copyright {
      display: none !important;
    }
    /* #endif */
  }
}
</style>
